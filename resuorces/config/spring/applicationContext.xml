<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="    
            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd  
            http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd  
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
            http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.2.xsd  
            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">

    <!-- p6spy配置 -->
     	<bean id="dataSource" class="com.p6spy.engine.spy.P6DataSource">
		<constructor-arg ref="dataSourceTarget"/>
	</bean>
    
	<!-- C3PO配置数据源 -->
	<bean id="dataSourceTarget" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" value="com.mysql.jdbc.Driver" />
		<property name="jdbcUrl" value="jdbc:mysql://localhost/mydb" />
		<property name="user" value="root" />
		<property name="password" value="1" />

		<!--连接池中保留的最大连接数，Default: 15 -->
		<property name="maxPoolSize" value="40" />
		<!--连接池中保留的最小连接数 -->
		<property name="minPoolSize" value="1" />
		<!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间，Default: 3 -->
		<!-- <property name="initialPoolSize" value="1" /> -->
		<!--最大空闲时间,60秒内未使用则连接被丢弃，若为0则永不丢弃，Default: 0 -->
		<!-- <property name="maxIdleTime" value="20" /> -->

		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数，Default: 3 -->
		<!-- <property name="acquireIncrement" value="5" /> -->

		<!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的 statements属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的 
			因素。如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0 -->
		<!-- <property name="maxStatements" value="0" /> -->

		<!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
		<!-- <property name="idleConnectionTestPeriod" value="60" /> -->

		<!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
		<!-- <property name="acquireRetryAttempts" value="30" /> -->

		<!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效 保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试 
			获取连接失败后该数据源将申明已断开并永久关闭。Default: false -->
		<!-- <property name="breakAfterAcquireFailure" value="true" /> -->

		<!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的 时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable 
			等方法来提升连接测试的性能。Default: false -->
		<!-- <property name="testConnectionOnCheckout" value="false" /> -->

	</bean>
	
    <!-- 配置sessionFactory -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">  
        <property name="dataSource" ref="dataSource"/>  
        <property name="hibernateProperties">
             <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.format_sql">true</prop>
             </props>
        </property>
        <property name="mappingDirectoryLocations">
             <list>
                 <value>
                    classpath:com/hbm
                 </value>
             </list>
         </property>
    </bean>  

	<!-- 事务管理器配置-->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate5.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<!-- 使用注解定义事务 -->
 	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />

	<!-- hibernateUtil工具类注入sessionFactory -->
	<bean id="hibernateUtil" class="utils.HibernateUtil">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>

    <!-- 引入服务bean -->
    <import resource="applicationContext-service.xml"/>
	
	<!-- 引入shiro -->
	<import resource="applicationContext-shiro.xml"/>
	
	<!-- 引入properties文件 -->
	<import resource="applicationContext-properties.xml"/>
</beans>